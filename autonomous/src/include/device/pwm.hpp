//
// Created by Muralidhar Ravuri on 11/5/18.
//

#ifndef SENSOR_PWM_HPP
#define SENSOR_PWM_HPP

#include <iostream>
#include <pigpio.h>

using namespace std;

class PWM {
private:
    const float minValue;                   // min voltage generated by this PWM (0V)
    const float maxValue;                   // max voltage generated by this PWM (3.3V)
    const unsigned int range;               // max range of the PWM

    const unsigned int pin;
    const unsigned int frequency;           // want this in, say, 5-20 KHz range

public:
    PWM(unsigned int pin, unsigned int frequency, unsigned int range = 255,
        float minValue = 0.0, float maxValue = 3.3)
        : minValue(minValue), maxValue(maxValue), range(range), pin(pin), frequency(frequency) {
        setup();
    }

    virtual ~PWM() {
        gpioTerminate();
    }

    void set(double value) {
        if (value < minValue) {
            value = minValue;
        } else if (value > maxValue) {
            value = maxValue;
        }
        double dutyCycle = value / maxValue;
        auto pwmValue = static_cast<unsigned int>(dutyCycle * range);
        gpioPWM(pin, pwmValue);
    }

private:
    void setup() {
        if (gpioInitialise() < 0) {
            cerr << "pigpio initialization failed" << endl;
            exit(1);
        }
        cout << "GPIO version " << gpioVersion() << endl;
        cout << "GPIO hardware revision " << gpioHardwareRevision() << endl;
        gpioSetMode(pin, PI_OUTPUT);
        gpioSetPWMfrequency(pin, frequency);
        if (range != 255) {
            gpioSetPWMrange(pin, range);
        }
    }

};

#endif //SENSOR_PWM_HPP
